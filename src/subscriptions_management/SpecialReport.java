/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package subscriptions_management;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;

import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import com.toedter.calendar.JDateChooser;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Date;
import javax.swing.JComboBox;

/**
 *
 * @author MyLau
 */
@SuppressWarnings("serial")
public class SpecialReport extends javax.swing.JInternalFrame {

    /**
     * Creates new form ListeEmploye
     */
    Statement stmt;
    Connexion maConnexion=new Connexion();
    float cumulTotal = (float) 0.0;
    float capitalInitial = (float) 0.0;
    float capitalActuel = (float) 0.0;
    float totalDebit = (float) 0.0, totalCredit = (float) 0.0;
    DefaultTableModel tableModel;
    Date selectedDate, selectedDate1;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    float actualGain = (float) 0.0;
    String person_id;
    
    
    
    public SpecialReport() {
        
        getAllDebitTotal();
        getAllCreditTotal();
        getIC();
        
        initComponents();
        
        fetchMembers();
        
        // Display credit and debit balance
        lblNewLabel.setText("Balance = "+totalDebit+" (D) - "+totalCredit+" (C)"+ " = "+(totalDebit-totalCredit));
        
        setLocation(8,32);
        
        
        String requeteListeLivre = "select * from transactions_table";
        
        try{
        	stmt= maConnexion.ObtenirConnexion().createStatement();
            ResultSet resultat= stmt.executeQuery(requeteListeLivre);
            while(resultat.next()){
            	actualGain = Float.parseFloat(resultat.getString("interet")) + actualGain;
                detailsLabel.setText("Interet actuel (IA) "+actualGain+" + Capital Initial "+capitalInitial+" = C.A "+(cumulTotal+capitalInitial));
            }
        } catch(SQLException ex) {
        	System.out.println(ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Rapport personnalisé"));
        
        // Create the table model & fulfill with data
        String[] columnNames = {"Date", "Id Op", "Libelle", "Debit", "Credit", "Interet", "Cumul interet", "Solde"};
        tableModel = new DefaultTableModel(columnNames, 0);
        
        /** Fetch data **/
        try {
        	java.sql.Statement stmt1= maConnexion.ObtenirConnexion().createStatement();
            java.sql.ResultSet resultSet= stmt1.executeQuery("SELECT * FROM transactions_table");
            cumulTotal = 0;
            while (resultSet.next()) {
            	cumulTotal = Float.parseFloat(resultSet.getString("interet")) + cumulTotal;
                // Retrieve values from the result set
                String date = resultSet.getString("date");
                int id = resultSet.getInt("id");
                String libelle = resultSet.getString("libelle");
                float montant = resultSet.getFloat("montant");
                String person = resultSet.getString("personne");

                // Calculate Debit, Credit, and Solde based on the Libelle value
                float debit = libelle.equals("Débit") ? montant : 0;
                float credit = libelle.equals("Crédit") ? montant : 0;
                
                String[] parts = person.split(" ");

                // Add a row to the table model
                Object[] row = {date, id, libelle+" par "+parts[1]+" "+parts[2], debit, credit, resultSet.getString("interet"), cumulTotal, 0};
                tableModel.addRow(row);
            }

            resultSet.close();
            stmt1.close();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
     // Update the Solde values in the table model
        float solde = capitalInitial;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            float debit = (float) tableModel.getValueAt(i, 3);
            float credit = (float) tableModel.getValueAt(i, 4);
            solde = solde - debit + credit;
            tableModel.setValueAt(solde, i, 7);
        }

        // Create the table with the table model
        TableEmp = new JTable(tableModel);
        /** Fetch data **/
        
        TableEmp.setBackground(new java.awt.Color(204, 255, 204));
        jScrollPane1.setViewportView(TableEmp);

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/printer.png"))); // NOI18N
        jButton1.setText("Imprimer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        detailsLabel = new JLabel("Chargement des données...");
        
        lblNewLabel = new JLabel("Balance");
        
        com.toedter.calendar.JDateChooser jTDateNais = new com.toedter.calendar.JDateChooser();
        jTDateNais.setDateFormatString("yyyy-MM-dd");
        
        com.toedter.calendar.JDateChooser jTDateNais_1 = new com.toedter.calendar.JDateChooser();
        
        PropertyChangeListener dateChangeListener = new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("date".equals(evt.getPropertyName())) {
                    // Retrieve the selected date from the JDateChooser
                    selectedDate = (Date) evt.getNewValue();
                    
                    // Perform any actions or logic based on the selected date
                    System.out.println("Selected Date: " + selectedDate);
                    
                    if(selectedDate != null || selectedDate1 != null) {
                    	fetchData(sdf.format(selectedDate),sdf.format(selectedDate1));
                    	getAllDebitTotal();
                    	getAllCreditTotal();
                    }   
                }
            }
        };
        
        PropertyChangeListener date1ChangeListener = new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("date".equals(evt.getPropertyName())) {
                    // Retrieve the selected date from the JDateChooser
                    selectedDate1 = (Date) evt.getNewValue();
                    
                    // Perform any actions or logic based on the selected date
                    System.out.println("Selected Date: " + selectedDate1);
                    
                    if(selectedDate != null || selectedDate1 != null) {
                    	fetchData(sdf.format(selectedDate),sdf.format(selectedDate1));
                    	getAllDebitTotal();
                    	getAllCreditTotal();
                    }
                }
            }
        };
        
        jTDateNais_1.getDateEditor().addPropertyChangeListener(dateChangeListener);
        jTDateNais.getDateEditor().addPropertyChangeListener(date1ChangeListener);

        
        jTDateNais_1.setDateFormatString("yyyy-MM-dd");
        
        JLabel lblNewLabel_1 = new JLabel("Dte 1");
        
        JLabel lblNewLabel_1_1 = new JLabel("Dte 2");
        
        JLabel lblNewLabel_2 = new JLabel("Personnalisé par membre");
        
        jCMembres = new JComboBox();
        jCMembres.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				String input = jCMembres.getSelectedItem().toString();
				String[] parts = input.split(" ");
				person_id = parts[0];
			}
        });
        jCMembres.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2Layout.setHorizontalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addGap(14)
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addComponent(detailsLabel, GroupLayout.PREFERRED_SIZE, 429, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(lblNewLabel_1)
        					.addGap(18)
        					.addComponent(jTDateNais_1, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(lblNewLabel_1_1, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(jTDateNais, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)
        					.addGap(60)
        					.addComponent(jButton1)
        					.addGap(89)
        					.addComponent(lblNewLabel, GroupLayout.PREFERRED_SIZE, 269, GroupLayout.PREFERRED_SIZE))
        				.addGroup(jPanel2Layout.createParallelGroup(Alignment.TRAILING, false)
        					.addComponent(jCMembres, Alignment.LEADING, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					.addComponent(lblNewLabel_2, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)))
        			.addContainerGap(97, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
        	jPanel2Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel2Layout.createSequentialGroup()
        			.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addGap(10)
        					.addGroup(jPanel2Layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(lblNewLabel)
        						.addComponent(detailsLabel, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
        						.addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(jTDateNais_1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        							.addComponent(jTDateNais, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        							.addComponent(lblNewLabel_1_1, Alignment.TRAILING))
        						.addComponent(lblNewLabel_1)))
        				.addGroup(jPanel2Layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(jButton1)))
        			.addGap(18)
        			.addComponent(lblNewLabel_2)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(jCMembres, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(59, Short.MAX_VALUE))
        );
        
        jPanel2.setLayout(jPanel2Layout);
        
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 1408, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        			.addContainerGap(19, Short.MAX_VALUE)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 438, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap())
        );
        jPanel1.setLayout(jPanel1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 1426, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    @SuppressWarnings("unused")
	private void fetchData(String string, String string2) {
        /** Fetching data **/

    	// Clear all rows from the table
    	tableModel.setRowCount(0);
    	
        try {
        	java.sql.Statement stmt1= maConnexion.ObtenirConnexion().createStatement();
            java.sql.ResultSet resultSet= stmt1.executeQuery("SELECT * FROM transactions_table WHERE date >= '"+string+"' AND date <= '"+string2+"' ");
            cumulTotal = 0;
            while (resultSet.next()) {
            	cumulTotal = Float.parseFloat(resultSet.getString("interet")) + cumulTotal;
                // Retrieve values from the result set
                String date = resultSet.getString("date");
                int id = resultSet.getInt("id");
                String libelle = resultSet.getString("libelle");
                float montant = resultSet.getFloat("montant");
                String person = resultSet.getString("personne");

                // Calculate Debit, Credit, and Solde based on the Libelle value
                float debit = libelle.equals("Débit") ? montant : 0;
                float credit = libelle.equals("Crédit") ? montant : 0;
                
                String[] parts = person.split(" ");

                // Add a row to the table model
                Object[] row = {date, id, libelle+" par "+parts[1]+" "+parts[2], debit, credit, resultSet.getString("interet"), cumulTotal, 0};
                tableModel.addRow(row);
            }

            resultSet.close();
            stmt1.close();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
     // Update the Solde values in the table model
        float solde = capitalInitial;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            float debit = (float) tableModel.getValueAt(i, 3);
            float credit = (float) tableModel.getValueAt(i, 4);
            solde = solde - debit + credit;
            tableModel.setValueAt(solde, i, 7);
        }

        // Create the table with the table model
        TableEmp = new JTable(tableModel);
        
        /** Fetching data **/
        
        /**  Update Debit Total & Credit Total **/
        try {
            java.sql.Statement stmt1 = maConnexion.ObtenirConnexion().createStatement();
            String query = "SELECT ROUND(SUM(montant), 2) FROM transactions_table WHERE libelle = 'Débit' AND date >= '"+string+"' AND date <= '"+string2+"'";
            java.sql.ResultSet resultat = stmt1.executeQuery(query);
            
            while (resultat.next()) {
                totalDebit = resultat.getFloat(1);
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
        
        try {
            java.sql.Statement stmt1 = maConnexion.ObtenirConnexion().createStatement();
            String query = "SELECT ROUND(SUM(montant), 2) FROM transactions_table WHERE libelle = 'Crédit' AND date >= '"+string+"' AND date <= '"+string2+"'";
            java.sql.ResultSet resultat = stmt1.executeQuery(query);

            while (resultat.next()) {
            	totalCredit = resultat.getFloat(1);
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
    private void getIC() {
    	// Get IC 
    	String requeteIC = "select * from settings";
        try {
        	stmt=maConnexion.ObtenirConnexion().createStatement();
			ResultSet resultat= stmt.executeQuery(requeteIC);
			while(resultat.next()) {
				capitalInitial = resultat.getFloat("current_initial_capital");
			}
			
			System.out.println("Capital initial "+capitalInitial);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MessageFormat header = new MessageFormat("Liste des transactions");
        MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try {
            TableEmp.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (java.awt.print.PrinterException e) {
            System.err.format("Erreur d'impression ", e.getMessage());
        }
    }
    //GEN-LAST:event_jButton1ActionPerformed
    
    private void getAllDebitTotal() {
        try {
            java.sql.Statement stmt1 = maConnexion.ObtenirConnexion().createStatement();
            String query = "SELECT ROUND(SUM(montant), 2) FROM transactions_table WHERE libelle = 'Débit'";
            java.sql.ResultSet resultat = stmt1.executeQuery(query);

            while (resultat.next()) {
                totalDebit = resultat.getFloat(1);
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
    private void getAllCreditTotal() {
    	try {
            java.sql.Statement stmt1 = maConnexion.ObtenirConnexion().createStatement();
            String query = "SELECT ROUND(SUM(montant), 2) FROM transactions_table WHERE libelle = 'Crédit'";
            java.sql.ResultSet resultat = stmt1.executeQuery(query);

            while (resultat.next()) {
            	totalCredit = resultat.getFloat(1);
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
    }
    
    public void fetchMembers() {
		 try{
			 jCMembres.removeAllItems();
	         java.sql.Statement stmt1= maConnexion.ObtenirConnexion().createStatement();
	         java.sql.ResultSet resultat= stmt1.executeQuery("SELECT * FROM membres");
	         
	         while(resultat.next()){                     
	        	 jCMembres.addItem(resultat.getString("id")+" "+resultat.getString("nom")+" "+resultat.getString("prenom")); 
	         }
		
	       }catch(Exception e){
	    	   System.out.print(e);
	       }
	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    
    private javax.swing.JTable TableEmp;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel detailsLabel;
    private JLabel lblNewLabel;
    JComboBox jCMembres;
}
